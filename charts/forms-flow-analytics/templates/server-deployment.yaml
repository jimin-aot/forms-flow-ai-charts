apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: '{{ .Chart.Name }}-server'
  name: '{{ .Chart.Name }}-server'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: '{{ .Chart.Name }}-server'
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: '{{ .Chart.Name }}-server'
    spec:
      containers:
      - name: '{{ .Chart.Name }}-server'
        image: '{{ .Values.redash.image.registry }}/{{ .Values.redash.image.repository }}:{{ .Values.redash.image.tag }}'
        imagePullPolicy: Always
        args:
          - server
        envFrom:
        - configMapRef:
            name: "{{ .Chart.Name }}" # default redash environment variables
        - secretRef:
            name: "{{ .Chart.Name }}" # default redash environment variables
        env:
          {{- if .Values.externalDatabase.existingDatabaseUrlKey }}
          - name: REDASH_DATABASE_URL
            valueFrom:
              secretKeyRef:
                key: {{ .Values.externalDatabase.existingDatabaseUrlKey }}
                name: "{{ .Values.externalDatabase.existingSecretName }}"
          {{- end }}
          {{- if not .Values.externalDatabase.existingDatabaseUrlKey }}
          - name: REDASH_DATABASE_URL
            valueFrom:
              configMapKeyRef:
                key: REDASH_DATABASE_URL
                name: "{{ .Chart.Name }}"
          {{- end }}
          - name: REDASH_WEB_WORKERS
            value: "4"
          - name: GUNICORN_CMD_ARGS
            value: "--timeout 300"
          - name: REDASH_MULTI_ORG
            valueFrom:
              secretKeyRef:
                key: REDASH_MULTI_ORG
                name: "{{ .Chart.Name }}"  
        lifecycle:
          postStart:
            exec:
              command:
                - '/bin/sh'
                - '-c'
                - 'python -B ./manage.py database create_tables'
        ports:
        - containerPort: {{ .Values.ingress.port }}
          protocol: TCP
        resources:
          limits:
            cpu: '{{ .Values.resources.limits.cpu }}'
            memory: '{{ .Values.resources.limits.memory }}'
          requests:
            cpu: '{{ .Values.resources.requests.cpu }}'
            memory: '{{ .Values.resources.requests.memory }}'
      restartPolicy: Always
      imagePullSecrets:
      - name: '{{ .Values.formsflow.auth }}'
